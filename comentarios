//para fechas moment.js//https://momentjs.com/npm i --save moment//moment(picture.createdAt).fromNow()//${picture.likes} I liked
/*function dislike() {
	pic.liked = false;
	pic.likes--;
	var newEl = render(pic);
	yo.update(el, newEl);
	return false;
}*/
//obtenemos el el que es ele elemento inicial
//pic.likes++pic.likes + 1
//en lugar de cargar la imagen asi src="office.jpg" esta la sentencia de llamado
//http://materializecss.com/cards.html
//https://www.npmjs.com/package/yo-yo
//picture solo se llama asi dentro de la funcion pero cuando la exportemos sera pic
//el null es por que no hay ningun this creo//bind para cambiar this osea//hace refencia ala funcion like
//module.exports = template;//le pasamos de parametro el box
///var moment = require('moment');
//es lo mismo que escribir una funcion lo de .then => ahorramos mucho codigo

//http://www.fandompost.com/wp-content/uploads/2016/07/Zestiria_5a.jpg//https://66.media.tumblr.com/5bd6c7bdc00c70c6996e3557a9633487/tumblr_nijgt8opO71u7889mo1_500.gif
//http://babeljs.io/repl/#?babili=false&evaluate=true&lineWrap=false&presets=es2015%2Creact%2Cstage-2&code=
/*https://projects.lukehaas.me/css-loaders/
token usado en los formularios usar https //letsencrypt.org para implementar el https //encriptar las contraseñas por eso en django es mas chido tye lo encripta solo
json web tokens //jwt.io para leer un poco mas sobre enviar datos encriptados del servidor al cliente siendo el servidor poder rescatar los datos
de esa manera no necesitas guardar en las cookies los datos del usuario y cada que haces un request no tener que levantar los daqtos de la base de datos
class Persona {
  constructor(nombre = '', amigos = []) {
    this.nombre = nombre
    this.amigos = amigos
  }
  
  saludar(extra = '') {
    alert(`Hola Mundo mi nombre es ${this.nombre} y ${extra}`)
  }
  
  listarAmigos() {
    this.amigos.forEach(amigo => {
      alert(`Hola soy ${this.nombre} y soy amigo de: ${amigo.nombre}`)
    })
  }
}

const dario = new Persona('Dario')
const alain = new Persona('Alain')
const sacha = new Persona('Diego', [dario, alain])
//sacha.listarAmigos()
//fn.call
//fn.apply
dario.saludar.call(alain, 'le gane a ash')
dario.saludar.apply(alain, ['le gane a ash ketchup'])
*/
//var rf = new IntlRelativeFormat('es');
//require('./header');//de esta manera usamos superagent para separar bien todo y poner el header en el index del homepage solamente //nos permite usar request tipo http

//https://github.com/mzabriskie/axios basados en promesas requests
/*funcionan asi las basadas en promesas : get y que ruta quiere lee o post y el parametro tenemos muchas formas de pasarle datos,nos permite lo mismo que superagent pero en promesas
tienen un metodo llamada.then y en caso de haber un error en cualquiera de los thens va a acaer en le try catch  .puedes poner un console.log(mandando el error)
https://github.com/github/fetch
es muy parecido alos anteriores 2 superagent y axion*/
//var moment = require('moment');
//require('moment/locale/es');//con esto le cambio el idioma a español ala fecha
//moment.locale('es');
//http://formatjs.io/github/https://github.com/yahoo/intl-messageformat
//es por español
//var yo = require('yo-yo');
//var empty = require('empty-element');
//Nombre del modulo
//main.innerHTML = 'Home <a href="/signup">Signup</a>';

//diga home//main.innerHTML = 'Signup2<a href="/">Homee</a>';

//page.start();
//diga signup
//clousure poder jugar con el alcance de las variables de las demas funciones//La funcion se ejecuta junto al error
//le da un middleware y de est manera le indicamos anuestro servido nombrado como app que se sirva de manera estatica
//asi se sirve archivos estaticos con express//index el que va a ser usado //res.send('Hola mundo!');
//todavia no le decimos que la app public no la hemos definido aqui para mandarla llamar
//si la ruta no existe o no esta definida pues me da cannot get/no-existe
/*function restric (req, res, next) {
	if (req.user) return next();//Si existe el usuario pues pasa
	res.redirect('/signup');
}
        	, restric
*/
//si fuera una dentro de otra ya se pondria el next dentro del cuerpo de la funcion
//setTimeout(function () {//funcion anonima
//}, 2000)//milisegundos osea 2 segundos
//https://docs.npmjs.com/misc/scripts para agregar comandos en el json estan todas las dependencias
//vamos a depender de la libreria express que es para servidores web de manera sencilla
//lanzamos el servidor //bower.io y duojs.org y npmjs de cajon ya esta muy predominante son gestores de paketes fundamentales hay que parender a publicar asi como recibimos para conertirnos
//en mejores profesionales
//ensambladores de paketes browserify.org otro es webpack.github.io por que esta creciendo mucho y se lleva muy bien con reactjs cada que hagas un required lo transforma de alguna
//manera el se da cuenta que es un archivo .cofee y nos lo transforma a javascript.
//tambien existen los automatizadores que puedes utilizar gruntjs.com y otro automatizador es Gulp.com es decir dentro de google vamos a usar browserify para esto de tal manera los
//archivos png copialos en tal lugar y asi repartir el codigo por partes 
//procesadores de estilos sass-lang.com nos hacen la vida mas facil al moemnto de no escribir tanto codigo puedes meter variables al css otro es lesscss.org y otro stylus-lang.com
//semver npm install y que lo agrega a tu json pues se ve en semver
/*-v: --version
-h, -?, --help, -H: --usage
-s, --silent: --loglevel silent
-q, --quiet: --loglevel warn
-d: --loglevel info
-dd, --verbose: --loglevel verbose
-ddd: --loglevel silly
-g: --global
-C: --prefix
-l: --long
-m: --message
-p, --porcelain: --parseable
-reg: --registry
-f: --force
-desc: --description
-S: --save
-D: --save-dev
-O: --save-optional
-B: --save-bundle
-E: --save-exact
-y: --yes
-n: --yes false
ll and la commands: ls --long*/

//facebook muchos programadores por que amedida que crece uno quiere dividir las partes por ejemplo timeline de facebook y por eso se divide en areas el producto
//tambien hay ciertas empresas que hacen investigaciones y sacaron react otra para sacar los datos de react y contrata a gente que crea librerias 
//google tiene un monton de productos google drive y cada una de esas tecnologias tienen varios equipos dividiendose las tareas cada compañia se organiza de manera
//diferente hay equipos por tecnologia dentro de cada hardware hay responsables de cada cosa,la parte de seguridad /escalar el video es para saber como se organiza spotify
//mejor fuente para saber conrespecto a tecnologia web seria conocer el nombre de los autores de las librerias//tengo que seguir a gente en twitter
//jwt.io es como un login de usuarios muy sencillo para las applicaciones / json web tokens nos ahorramos ese acceso ala base de datos del usuario etc
//es muy recomendable como mejora la perfomance del sitio/babeljs parte del stack/browserify/gulp pero pudimos aver trabajo con webpack que es mas avanzado
//en lugar de content le puse picture con la funcion map que lo que hace es por cada uno de los elementos va a ejecutar algo/base de datos dentro del stack
//makefy como package json en unix muy usado/amazon s3 para llevar a produccion/docker muy buena herramienta por si tenemos un monton de imagenes y seutiliza en
//produccion beigrant/webcamjs/passportjs.org login con redes sociales de manera muy sencilla
//webrst que lo que permite es establecer un contacto entre 2 compus sin pasar por un servidor primero 
//https://www.npmjs.com/package/multer
//gulp assets/gulp styles
//gulp watch/gulp

//module.exports = template;//le pasamos de parametro el box

//carga de arriba para abajo
/* npm un instalador de paketes acutualizacion de librerias con un spinner
function loadPicturesAxioss(ctx, next) {
	axios
		.get('/api/pictures')//err de si es error 404 500 2000 y res para la respuesta del contenido que envia el servidor en este caso los pictures 
		.then(function (res) {
			ctx.pictures = res.data;//en este caso las pictures//context va cargando datos atravaez de los middlewares
			var pic = ctx.pictures[0];
			return axios.get('/api/pictures/${pic.id}')//nos devuelve una promesa
		})
		.then(function (res) {
			ctx.pictures[0] = res.data;//esta la respues de la anterior promesa todo el detalle de la primer foto
			next();
		})
		.catch(function (err) {
			console.log(err);
		})
}*/

//https://github.com/visionmedia/superagent
//una cadena de funciones de middlewares por ejemplo ssi queremos redireccionar acceder ala home y no esta logeado te rediregige al signin y solo tendriamos que mandar bueno
//esto es backend le entiendo mas
/*	var pictures = [
		{
			user: {
				username: 'slifszic',
				avatar: 'us.jpg'
			},
			url: 'office.jpg',
			likes: 11,
			liked: false,
			createdAt: new Date().getTime()
		},
		{
			user: {
				username: 'slifszic',
				avatar: 'us.jpg'
			},
			url: 'office.jpg',
			likes: 1,
			liked: true,
			createdAt: new Date().setDate(new Date().getDate() - 10)
		}
	];*/
/*var page = require('page');
var title = require('title');

page('/', function (ctx, next){
	title('Platzigram');
	var main = document.getElementById('main-container')
	main.innerHTML = '<a href="/signup">Signup</a>'
})*/
//nuevo template
//http://materializecss.com/color.html
//browserify muy usado en esta parte
//para cambiar la fecha al new date
//http://fontawesome.io/icons/
//	margin: 30px auto;
/*footer.site-footer
          .container
            .row
              .col.s12.l3.center-align
                // Dropdown Trigger
                a.dropdown-button.btn.btn-flat(href='#', data-activates='dropdown1') Idioma
                // Dropdown Structure
                ul#dropdown1.dropdown-content
                  li
                    a(href='#!') Español
                  li
                    a(href='#!') Ingles
              .col.s12.l3.push-l6.center-align
                | © 2016 Platzigram*/
/*.btn.btn-flat {
  background-color: transparent;
  box-shadow: none;
}*/

//lo utiliza como meddleware
//define una variable ala cual le asignamos el valor de buscar dentro de node_modules el que se llame express y express tambien tiene un archivo
//main y va a regresar lo qu esporte ese main
//uno de los servicios de amazon el amazonws/AWS es un sistema muy potente para nuestro proyecto usaremos AmazonS3 lo puedes usar como un cdn para los assets
//estaticos de la applicacion
//https://www.npmjs.com/package/standard aqui vienen las reglas y todo